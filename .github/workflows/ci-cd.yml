name: CI/CD Pipeline - Spring Boot Authentication System

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-backend:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testdb
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Wait for MySQL to be ready
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client
          for i in {1..30}; do
            if mysql -h 127.0.0.1 -P 3306 -u root -proot -e "SELECT 1;" 2>/dev/null; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL... Attempt $i"
            sleep 2
          done

      - name: Install Chrome for Selenium tests
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: Setup ChromeDriver
        run: |
          # Download and setup ChromeDriver
          CHROME_VERSION=$(google-chrome --version | awk '{print $3}')
          echo "Chrome version: $CHROME_VERSION"
          CHROME_MAJOR_VERSION=$(echo $CHROME_VERSION | cut -d'.' -f1)
          echo "Chrome major version: $CHROME_MAJOR_VERSION"
          
          # Download the correct ChromeDriver version
          wget -q "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_MAJOR_VERSION" -O chromedriver_version.txt
          CHROMEDRIVER_VERSION=$(cat chromedriver_version.txt)
          echo "ChromeDriver version: $CHROMEDRIVER_VERSION"
          
          wget -q "https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip"
          unzip chromedriver_linux64.zip
          sudo mv chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
          chromedriver --version

      - name: Run unit and service tests (excluding Selenium)
        run: mvn test -Dtest="**/*UnitTest,**/*ServiceTest,**/*ApiTest" -Dspring.profiles.active=test -DexcludedGroups=selenium
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/testdb
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: root
          SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop

      - name: Run Selenium tests with proper setup
        run: |
          # Set display for headless Chrome
          export DISPLAY=:99
          /usr/bin/Xvfb :99 -screen 0 1920x1080x24 &
          
          # Run Selenium tests with proper Chrome options
          mvn test -Dtest="**/*PageTest" -Dspring.profiles.active=test -Dselenium.headless=true -Dsurefire.failIfNoSpecifiedTests=false
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/testdb
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: root
          SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop

      - name: Build application JAR
        run: mvn clean package -DskipTests

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: |
            target/surefire-reports/
            target/cucumber-reports/
          retention-days: 7

      - name: Upload application JAR
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: target/*.jar
          retention-days: 7

  deploy-demo:
    runs-on: ubuntu-latest
    needs: test-backend
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: application-jar

      - name: Display build success
        run: |
          echo "âœ… CI/CD Pipeline Completed Successfully!"
          echo "ðŸ“¦ Application JAR: $(ls *.jar)"
          echo "ðŸ§ª All tests passed!"
          echo "ðŸš€ Ready for deployment!"